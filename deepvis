import os
import sys
import json
import subprocess
import platform
import requests
import asyncio
import random
import webbrowser
from datetime import datetime
import edge_tts
import pygame
import speech_recognition as sr
import threading
import queue
import re
import time
import tkinter as tk
from tkinter import scrolledtext, ttk, messagebox

conversation_history = []
command_queue = queue.Queue()
history_lock = threading.Lock()

try:
    script_dir = os.path.dirname(os.path.abspath(__file__))
    json_path = os.path.join(script_dir, 'commands.json')
    with open(json_path, encoding="utf-8") as f:
        COMMANDS = json.load(f)
except Exception as e:
    messagebox.showerror("설정 파일 오류", f"commands.json 로드 실패: {e}")
    sys.exit(1)

try:
    DEEPSEEK_API_KEY = " Your API KEY "
    VOICE = "ko-KR-SunHiNeural"
except Exception:
    pass

def speak(text):
    if not text:
        return
    threading.Thread(target=lambda: asyncio.run(_speak_async(text)), daemon=True).start()

async def _speak_async(text):
    output_file = f"temp_{random.randint(1000, 9999)}.mp3"
    try:
        volume = max(0.1, 1.0 - (len(text) / 150.0))
        
        communicate = edge_tts.Communicate(text, VOICE)
        await communicate.save(output_file)
        
        if pygame.mixer.get_init():
            pygame.mixer.music.load(output_file)
            pygame.mixer.music.set_volume(volume)
            pygame.mixer.music.play()
            while pygame.mixer.music.get_busy():
                await asyncio.sleep(0.1)
    except Exception as e:
        print(f"Debug: TTS 생성 또는 재생 중 오류 발생 - {e}")
    finally:
        if os.path.exists(output_file):
            try: 
                os.remove(output_file)
            except PermissionError: 
                pass

def ask_deepseek(messages):
    try:
        response = requests.post(
            " Your Base url " ,
            headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"},
            json={"model": "deepseek/deepseek-chat", "messages": messages},
            timeout=15
        )
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content']
    except requests.exceptions.RequestException as e:
        print(f"API 요청 오류: {e}")
        return "네트워크 연결을 확인해주세요."
    except Exception as e:
        print(f"응답 처리 오류: {e}")
        return "AI 응답을 처리하는 중 오류가 발생했습니다."

def listen_for_command():
    r = sr.Recognizer()
    r.pause_threshold = 0.8
    try:
        with sr.Microphone() as source:
            print("🎤 듣고 있습니다...")
            try:
                audio = r.listen(source, timeout=5)
                text = r.recognize_google(audio, language='ko-KR')
                return text
            except (sr.UnknownValueError, sr.WaitTimeoutError):
                return None
            except Exception as e:
                print(f"음성 인식 오류: {e}")
                return None
    except Exception as e:
        print(f"마이크 초기화 실패: {e}")
        return None

def process_and_execute(command_raw):
    with history_lock:
        conversation_history.append({"role": "user", "content": command_raw})

    messages_to_send = conversation_history[-5:]

    response_text = ask_deepseek([{"role": "user", "content": command_raw}])

    if response_text:
        with history_lock:
            conversation_history.append({"role": "assistant", "content": response_text})
        speak(response_text)
    
    return response_text

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("딥비스 AI 비서 (디버깅 완료)")
        self.geometry("800x800")
        
        self.output_area = scrolledtext.ScrolledText(self, wrap=tk.WORD, state=tk.DISABLED)
        self.output_area.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        input_frame = ttk.Frame(self)
        input_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.input_field = ttk.Entry(input_frame)
        self.input_field.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.input_field.bind("<Return>", self.send_command)
        
        self.send_button = ttk.Button(input_frame, text="전송", command=self.send_command)
        self.send_button.pack(side=tk.LEFT)
        
        self.after(100, self.initialize_systems)
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

    def initialize_systems(self):
        try:
            pygame.mixer.init()
            self.add_message("딥비스", "안녕하세요. 무엇을 도와드릴까요?")
            speak("안녕하세요. 무엇을 도와드릴까요?")
            
            self.log_cleaner_thread = threading.Thread(target=self.cleanup_logs, daemon=True)
            self.log_cleaner_thread.start()
            
        except Exception as e:
            print(f"시스템 초기화 오류: {e}")
            self.add_message("시스템", "오디오 장치를 초기화할 수 없습니다.")

    def cleanup_logs(self):
        while True:
            time.sleep(60)
            try:
                with history_lock:
                    if len(conversation_history) > 100:
                        conversation_history[:] = conversation_history[-50:]
            except Exception as e:
                print(f"로그 정리 오류: {e}")

    def add_message(self, sender, message):
        self.output_area.config(state=tk.NORMAL)
        self.output_area.insert(tk.END, f"{sender}: {message}\n\n")
        self.output_area.config(state=tk.DISABLED)
        self.output_area.see(tk.END)

    def send_command(self, event=None):
        user_input = self.input_field.get().strip()
        if not user_input: return
        
        self.add_message("사용자", user_input)
        self.input_field.delete(0, tk.END)
        
        threading.Thread(target=self.command_handler_thread, args=(user_input,), daemon=True).start()

    def command_handler_thread(self, user_input):
        response = process_and_execute(user_input)
        if response:
            self.after(0, self.add_message, "딥비스", response)

    def on_closing(self):
        if pygame.mixer.get_init():
            pygame.mixer.quit()
        self.destroy()

if __name__ == "__main__":
    app = App()
    app.mainloop()

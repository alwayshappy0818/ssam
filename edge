import cv2
import json
import numpy as np
import os

# --- 설정 ---
# COCO 어노테이션 파일 경로
ANNOTATION_FILE = 'D:/motor.coco/train/_annotations.coco.json'
# 이미지가 있는 폴더 경로
IMAGE_DIR = 'D:/motor.coco/train'
# 결과 이미지를 저장할 폴더
OUTPUT_DIR = 'D:/output_edges'

# 결과 저장 폴더 생성
os.makedirs(OUTPUT_DIR, exist_ok=True)

# --- COCO JSON 파일 로드 ---
with open(ANNOTATION_FILE, 'r') as f:
    coco_data = json.load(f)

# 카테고리 정보 (id -> name) 맵 생성
categories = {cat['id']: cat['name'] for cat in coco_data['categories']}

# 이미지 정보를 id를 키로 하는 딕셔너리로 변환 (빠른 조회를 위해)
images_info = {img['id']: img for img in coco_data['images']}

# 어노테이션 정보를 이미지 id별로 그룹화
annotations_by_image_id = {}
for ann in coco_data['annotations']:
    img_id = ann['image_id']
    if img_id not in annotations_by_image_id:
        annotations_by_image_id[img_id] = []
    annotations_by_image_id[img_id].append(ann)

# --- 각 이미지에 대해 엣지 검출 및 시각화 ---
for img_id, annotations in annotations_by_image_id.items():
    # 원본 이미지 로드
    img_info = images_info[img_id]
    img_path = os.path.join(IMAGE_DIR, img_info['file_name'])
    image = cv2.imread(img_path)

    if image is None:
        print(f"이미지를 로드할 수 없습니다: {img_path}")
        continue

    print(f"이미지 처리 중: {img_info['file_name']}")

    # 각 어노테이션(객체)에 대해 엣지(컨투어) 그리기
    for ann in annotations:
        # segmentation 정보는 보통 [[x1, y1, x2, y2, ...]] 형태
        segmentation = ann['segmentation'][0]
        
        # 컨투어 형태로 변환: (N, 1, 2) 모양의 배열
        contour = np.array(segmentation).reshape((-1, 1, 2)).astype(np.int32)
        
        # 원본 이미지에 컨투어 그리기
        # cv2.drawContours(이미지, [컨투어], 컨투어 인덱스, 색상, 두께)
        cv2.drawContours(image, [contour], -1, (0, 255, 0), 2) # 초록색, 두께 2

    # 결과 이미지 저장
    output_path = os.path.join(OUTPUT_DIR, img_info['file_name'])
    cv2.imwrite(output_path, image)

print(f"\n엣지 검출 완료! 결과는 '{OUTPUT_DIR}' 폴더에 저장되었습니다.")

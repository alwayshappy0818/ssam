print("--- Jarvis Final Edition (Service Account Auth) ---")

import json, subprocess, platform, requests, pyautogui, os, asyncio
from datetime import datetime
import edge_tts
import pygame
import google.generativeai as genai
from google.oauth2 import service_account # 서비스 계정 인증을 위해 추가

# --- 1. 서비스 계정 및 엔진 설정 ---
try:
    # 2단계에서 프로젝트 폴더에 넣은 서비스 계정 키 파일의 이름을 지정합니다.
    SERVICE_ACCOUNT_FILE = 'service_account.json'
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    key_path = os.path.join(script_dir, SERVICE_ACCOUNT_FILE)

    # 서비스 계정 파일로부터 인증 정보를 생성합니다.
    credentials = service_account.Credentials.from_service_account_file(key_path)
    # API 키 대신 생성된 인증 정보로 Gemini를 설정합니다.
    genai.configure(credentials=credentials)
    
    gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')
    
    VOICE = "ko-KR-SunHiNeural"
    RATE = "+20%"
    pygame.mixer.init()

except Exception as e:
    print(f"엔진 초기화 실패: {e}\n서비스 계정 파일의 경로와 이름이 올바른지 확인하세요.")
    exit()

# --- 2. 설정 파일 로드 ---
try:
    json_path = os.path.join(script_dir, 'commands.json')
    with open(json_path, encoding="utf-8") as f:
        full_config = json.load(f)
    COMMANDS = {k: v for k, v in full_config.items() if not k.startswith("##")}
except FileNotFoundError:
    speak(f"오류. '{json_path}' 에서 commands.json을 찾을 수 없습니다.")
    exit()

# (이하 3단계, 4단계 코드는 이전과 모두 동일합니다.)
# --- 3. 핵심 기능 함수 ---
def speak(text):
    print(f"🔊 자비스: {text}")
    try: asyncio.run(_speak_async(text))
    except Exception as e: print(f"음성 출력 중 오류 발생: {e}")

async def _speak_async(text):
    output_file = "response.mp3"
    try:
        communicate = edge_tts.Communicate(text, VOICE, rate=RATE)
        await communicate.save(output_file)
        pygame.mixer.music.load(output_file)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy(): pygame.time.Clock().tick(10)
        pygame.mixer.music.unload(); await asyncio.sleep(0.1); os.remove(output_file)
    except Exception as e: print(f"비동기 음성 처리 중 오류: {e}")

def get_current_time():
    now = datetime.now()
    am_pm = "오후" if now.hour >= 12 else "오전"
    hour = now.hour - 12 if now.hour > 12 else (12 if now.hour == 0 else now.hour)
    return f"현재 시간은 {am_pm} {hour}시 {now.minute}분입니다."

def get_weather_forecast():
    try:
        lat, lon = 36.7836, 127.0000
        url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current=temperature_2m,wind_speed_10m"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        temp = data['current']['temperature_2m']
        wind_speed_kmh = round(data['current']['wind_speed_10m'] * 3.6, 1)
        return f"현재 아산시의 기온은 {temp}도, 풍속은 시속 {wind_speed_kmh} 킬로미터입니다."
    except: return "날씨 정보를 가져오는 데 실패했습니다."

def get_response_text(command_info):
    target = command_info.get('target_name', '')
    action_type = command_info.get('action_type', '')
    def has_batchim(word):
        if not word: return False
        last_char = word[-1]
        if '가' <= last_char <= '힣': return (ord(last_char) - ord('가')) % 28 > 0
        return False
    target_eul_reul = target + '을' if has_batchim(target) else target + '를'
    if action_type == 'execute': return f"알겠습니다. {target_eul_reul} 실행하겠습니다."
    elif action_type == 'terminate': return f"네. {target_eul_reul} 종료하겠습니다."
    elif action_type == 'empty': return f"{target_eul_reul} 비우겠습니다."
    elif action_type == 'special' and target == '스크린샷': return "스크린샷을 실행합니다."
    return f"{target} 명령을 실행합니다."

def execute(action_key):
    command_info = COMMANDS.get(action_key, {})
    cmd = command_info.get(platform.system().lower())
    action_type = command_info.get("action_type")
    if cmd:
        try:
            if action_type == 'execute':
                subprocess.Popen(cmd, shell=True)
            else:
                subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
            return get_response_text(command_info)
        except Exception as e:
            print(f"'{action_key}' 실행 중 오류 발생: {e}")
            return f"{command_info.get('target_name', action_key)} 실행 중 오류가 발생했습니다."
    return "실행할 명령어가 없습니다."

def ask_gemini(prompt):
    try:
        response = gemini_model.generate_content(prompt)
        return response.text.strip().strip("'\".,")
    except Exception as e:
        print(f"오류: Gemini API와 통신 중 문제가 발생했습니다. ({e})")
        return "죄송합니다, 지금은 답변할 수 없습니다."

# --- 4. 메인 루프 ---
speak("자비스 온라인, 어떻게 도와드릴까요?")
while True:
    text = input("⌨️ 명령을 입력하세요: ")
    if not text.strip(): continue
    command_raw = text.replace("자비스", "").strip() if "자비스" in text else text.strip()
    if command_raw.lower() in ['종료', 'exit', 'quit']:
        speak("자비스를 종료합니다. 오늘도 좋은 하루 되세요!")
        break
    print(f"💬 인식된 명령: {command_raw}")
    final_command_key = None
    available_functions = list(COMMANDS.keys())
    function_descriptions = []
    for key, info in COMMANDS.items():
        description = f"- '{key}' (관련 표현: {', '.join(info.get('aliases', []))})"
        function_descriptions.append(description)
    intent_prompt = (f"당신은 사용자의 자연어 명령에서 핵심 의도를 파악하는 AI 두뇌입니다. 다음 '기능 설명'을 참고하여, 주어진 '사용자 명령'과 가장 일치하는 기능의 이름(key) '하나'만 정확히 출력해주세요.\n\n## 기능 설명:\n" + "\n".join(function_descriptions) + f"\n\n## 지시:\n적합한 기능이 있다면 그 기능의 이름만, 없다면 'NULL'만 출력하세요.\n\n## 사용자 명령:\n\"{command_raw}\"")
    gemini_suggestion = ask_gemini(intent_prompt)
    if gemini_suggestion != "NULL" and gemini_suggestion in available_functions:
        final_command_key = gemini_suggestion
    result = ""
    if final_command_key:
        command_info = COMMANDS.get(final_command_key, {})
        action_type = command_info.get('action_type')
        if action_type == 'fetch_and_report':
            target_name = command_info.get('target_name')
            if target_name == '현재 날씨': result = get_weather_forecast()
            elif target_name == '현재 시간': result = get_current_time()
        elif action_type == 'special':
            result = get_response_text(command_info)
            pyautogui.hotkey('win', 'shift', 's')
        elif action_type == 'empty':
            speak(f"경고, {command_info.get('target_name')}을(를) 비우면 되돌릴 수 없습니다. 정말 실행하시겠습니까?")
            confirm = input("정말 실행하시겠습니까? (y/n): ")
            result = execute(final_command_key) if confirm.lower() == 'y' else "실행이 취소되었습니다."
        else:
            result = execute(final_command_key)
    else:
        chat_prompt = f"당신은 '자비스'라는 이름을 가진 AI 비서입니다. 사용자의 다음 말에 대해 자연스럽게 대화하듯 답변해주세요.자연스러운 대화에서 답변이 너무 길지않게 최대한 짧고 간결하게 하세요.\n\n사용자: \"{command_raw}\"\n자비스:"
        result = ask_gemini(chat_prompt) or f"'{command_raw}'에 해당하는 명령을 찾지 못했습니다."
    if result:
        speak(result)
